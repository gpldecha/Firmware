// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file sensor_baro_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "sensor_baro_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

sensor_baro_::sensor_baro_()
{
    m_error_count = 0;
    m_pressure = 0.0;
    m_altitude = 0.0;
    m_temperature = 0.0;
    m_device_id = 0;
}

sensor_baro_::~sensor_baro_()
{
}

sensor_baro_::sensor_baro_(const sensor_baro_ &x)
{
    m_error_count = x.m_error_count;
    m_pressure = x.m_pressure;
    m_altitude = x.m_altitude;
    m_temperature = x.m_temperature;
    m_device_id = x.m_device_id;
}

sensor_baro_::sensor_baro_(sensor_baro_ &&x)
{
    m_error_count = x.m_error_count;
    m_pressure = x.m_pressure;
    m_altitude = x.m_altitude;
    m_temperature = x.m_temperature;
    m_device_id = x.m_device_id;
}

sensor_baro_& sensor_baro_::operator=(const sensor_baro_ &x)
{
    m_error_count = x.m_error_count;
    m_pressure = x.m_pressure;
    m_altitude = x.m_altitude;
    m_temperature = x.m_temperature;
    m_device_id = x.m_device_id;
    
    return *this;
}

sensor_baro_& sensor_baro_::operator=(sensor_baro_ &&x)
{
    m_error_count = x.m_error_count;
    m_pressure = x.m_pressure;
    m_altitude = x.m_altitude;
    m_temperature = x.m_temperature;
    m_device_id = x.m_device_id;
    
    return *this;
}

size_t sensor_baro_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t sensor_baro_::getCdrSerializedSize(const sensor_baro_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void sensor_baro_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_error_count;
    scdr << m_pressure;
    scdr << m_altitude;
    scdr << m_temperature;
    scdr << m_device_id;
}

void sensor_baro_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_error_count;
    dcdr >> m_pressure;
    dcdr >> m_altitude;
    dcdr >> m_temperature;
    dcdr >> m_device_id;
}

size_t sensor_baro_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            






    return current_align;
}

bool sensor_baro_::isKeyDefined()
{
    return false;
}

void sensor_baro_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
}